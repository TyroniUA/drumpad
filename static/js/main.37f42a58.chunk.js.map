{"version":3,"sources":["Drumchange.js","App.js","serviceWorker.js","index.js"],"names":["data","id","letter","src","ref","React","createRef","DrumChange","props","handleDisplay","display","setState","handlePress","e","audio","document","getElementById","key","toUpperCase","play","currentTime","parentElement","handleClick","console","log","target","firstChild","state","this","addEventListener","removeEventListener","arr","map","d","index","className","onClick","tag","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAEMA,EAAM,CACV,CAAEC,GAAI,QAASC,OAAQ,IAAKC,IAAK,oDAAqDC,IAAKC,IAAMC,aAEjG,CAAEL,GAAI,SAAUC,OAAQ,IAAKC,IAAK,wDAAyDC,IAAKC,IAAMC,aACtG,CAAEL,GAAI,QAASC,OAAQ,IAAKC,IAAK,kDAAmDC,IAAKC,IAAMC,aAC/F,CAAEL,GAAI,UAAWC,OAAQ,IAAKC,IAAK,yDAA0DC,IAAKC,IAAMC,aACxG,CAAEL,GAAI,SAAUC,OAAQ,IAAKC,IAAK,gDAAiDC,IAAKC,IAAMC,aAC9F,CAAEL,GAAI,UAAWC,OAAQ,IAAKC,IAAK,0DAA2DC,IAAKC,IAAMC,aACzG,CAAEL,GAAI,WAAYC,OAAQ,IAAKC,IAAK,gDAAiDC,IAAKC,IAAMC,aAChG,CAAEL,GAAI,WAAYC,OAAQ,IAAKC,IAAK,wDAAyDC,IAAKC,IAAMC,aACxG,CAAEL,GAAI,QAASC,OAAQ,IAAKC,IAAK,+DAAgEC,IAAKC,IAAMC,cAyE/FC,E,YArEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,cAAgB,SAAAC,GAAO,OAAI,EAAKC,SAAS,CAACD,aAPvB,EAgBnBE,YAAc,SAAAC,GAEZ,IAAMC,EAAQC,SAASC,eAAeH,EAAEI,IAAIC,eACxCJ,IAEFA,EAAMK,OACNL,EAAMM,YAAc,EACpB,EAAKX,cAAcK,EAAMO,cAAcpB,MAvBxB,EA4BnBqB,YAAc,SAACT,GACbU,QAAQC,IAAI,WACZ,IAAMC,EAASZ,EAAEY,OAAOC,WACxBD,EAAON,OACPM,EAAOL,YAAc,EACrB,EAAKX,cAAcI,EAAEY,OAAOxB,KA/B5B,EAAK0B,MAAQ,CACXjB,QAAS,iBAHM,E,iFAUjBa,QAAQC,IAAII,KAAKd,OACjBC,SAASc,iBAAiB,UAAWD,KAAKhB,e,6CAG1CG,SAASe,oBAAoB,a,+BAuBrB,IAAD,OAIP,OAFAP,QAAQC,IAAII,KAAKG,KAGf,yBAAK9B,GAAG,gBAEN,yBAAKA,GAAG,WACN,kDACA,yBAAKA,GAAG,SAAS2B,KAAKD,MAAMjB,UAE9B,6BACGV,EAAKgC,KAAI,SAACC,EAAGC,GAAJ,OAAc,4BAAQC,UAAU,WACxClC,GAAIgC,EAAEhC,GACNgB,IAAKgB,EAAEhC,GACPC,OAAQ+B,EAAE/B,OACVkC,QAAS,SAAAvB,GAAC,OAAI,EAAKS,YAAYT,KAE/B,2BAAOsB,UAAU,OACflC,GAAIgC,EAAE/B,OACNmC,IAAKJ,EAAEhC,GACPE,IAAK8B,EAAE9B,IACPC,IAAK6B,EAAE7B,MAER6B,EAAE/B,OAZmB,c,GAlDTG,IAAMiC,WCAhBC,MATf,WACE,OACE,yBAAKJ,UAAU,OAEb,kBAAC,EAAD,QCEcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASC,eAAe,SD6H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.37f42a58.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst data =[\r\n  { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3', ref: React.createRef(),\r\n},\r\n  { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3', ref: React.createRef() },\r\n  { id: 'bongo', letter: 'E', src: 'http://tipiwiki.free.fr/snd/Percussion(4e)2.wav', ref: React.createRef()},\r\n  { id: 'tom tom', letter: 'A', src: 'http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav', ref: React.createRef() },\r\n  { id: 'bass 3', letter: 'S', src: 'http://billor.chsh.chc.edu.tw/sound/bass4.wav', ref: React.createRef() },\r\n  { id: 'shotgun', letter: 'D', src: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav', ref: React.createRef() },\r\n  { id: 'high hat', letter: 'Z', src: 'http://www.denhaku.com/r_box/tr707/closed.wav', ref: React.createRef() },\r\n  { id: 'drum hit', letter: 'X', src: 'http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3', ref: React.createRef() },\r\n  { id: 'laser', letter: 'C', src: 'http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav', ref: React.createRef()  },\r\n]\r\n\r\nclass DrumChange extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: 'Click to play'\r\n    }\r\n  }\r\n\r\n  handleDisplay = display => this.setState({display})\r\n\r\n  componentDidMount() {\r\n    console.log(this.audio)\r\n    document.addEventListener('keydown', this.handlePress)\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown')\r\n  }\r\n  handlePress = e => {\r\n\r\n    const audio = document.getElementById(e.key.toUpperCase());\r\n    if (audio) {\r\n      \r\n      audio.play();\r\n      audio.currentTime = 0;\r\n      this.handleDisplay(audio.parentElement.id)\r\n    }\r\n  }\r\n\r\n\r\n  handleClick = (e) => {\r\n    console.log('playing')\r\n    const target = e.target.firstChild;\r\n    target.play();\r\n    target.currentTime = 0;\r\n    this.handleDisplay(e.target.id)\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(this.arr);\r\n\r\n    return (\r\n      <div id='drum-machine' >\r\n\r\n        <div id='display'>\r\n          <h1>DRUM-MACHINE v.1.0</h1>\r\n          <div id='state'>{this.state.display}</div>\r\n        </div>\r\n        <div >\r\n          {data.map((d, index) => <button className='drum-pad'\r\n            id={d.id}\r\n            key={d.id}\r\n            letter={d.letter}\r\n            onClick={e => this.handleClick(e)}\r\n          >\r\n            <audio className='clip'\r\n              id={d.letter}\r\n              tag={d.id}\r\n              src={d.src}\r\n              ref={d.ref} />\r\n              \r\n            {d.letter} </button>)}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DrumChange;","import React from 'react';\nimport './App.css';\nimport DrumChange from './Drumchange';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <DrumChange/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}